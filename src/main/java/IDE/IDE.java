package IDE;

import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import Analizers.Alexico;
import Analizers.Alexico.Token;
import Analizers.Interprete;
import Analizers.Parser;
import utils.Directorio;
import utils.NumeroLinea;

/**
 *
 * @author derek
 */
public class IDE extends javax.swing.JFrame {
	//ATRRIBUTOS DE LA CLASE IDE
    NumeroLinea numerolinea;
    Directorio dir;
    Alexico alex = new Alexico();
    Parser parser = new Parser();
    
    //CONSTRUCTOR DEL IDE
    public IDE() {	
        initComponents();//inicializa los componentes del IDE, botones, paneles de texto, ubicaciones de los componentes, etc
        inizializar();//Inicializa los componentes de numero de linea, el encabezado de FIla JScrollPane y el objeto Directorio
        colors();//Colorea las palabras del comoponente del panel de texto
    }
    
    //METODOS DE LA CLASE IDE

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    //Tal parece este metodo esta demas estorbando xD
    public void clearAllComp() { //Metodo para limpiar todo el texto que pueda haber en el componente JtaCompile 
        jtaCompile.setText("");
    }

    private void inizializar() {
        //Inicializa componentes como el numero de linea del panel de texto JTextPane
        numerolinea = new NumeroLinea(jtpCode);//Inicializa el componente que se encarga de mostrar el número de lineas dl componente del panel de texto JTextPane
        jScrollPane1.setRowHeaderView(numerolinea);// Establece numerolinea como el encabezado de fila del JScrollPane. Esto significa que numerolinea (que muestra los números de línea) se mostrará en el lado izquierdo del JScrollPane
        dir = new Directorio();//Define el objeto que majena directorios
    }

    //metodo para encontrar la pocision del primer espacio en retroceso de una cadena de caracteres dado un punto de la cadena(indice)
    //Al parecer tampoco sirve para nada realmente el metodo no se usa
    private int findLastNonWordChar(String text, int index) {
        while (--index >= 0) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
        }
        return index;
    }

    //metodo para encontrar la pocision del espacio en avance de una cadena de caracteres dado un punto de la cadena(indice)
    //Tambien parece que el metodo no se usa
    private int findFirstNonWordChar(String text, int index) {
        while (index < text.length()) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
            index++;
        }
        return index;
    }

    //metodo para pintar las palabras reservadas
    private void colors() {
    	//En resumen lo que hace el codigo:
    	//Obtiene el estilio pretederminado
    	//define colores especificos para cada tipo de palabras
	    	//DEFINICION DE SUBCLASE ANONIMA DENTRO DEL METODO
		    	//METODO INSERTSTRING
	    		//Inserta cadena de Texto al documento 
		    	//Del texto insertado, lo divide en lineas
    			//Divide las palabras en lineas(un arreglo) utilizando una expreci[on regular
    			//Determina pocision de la palabra y aplica estilo con metodo applyStyle...
		//Finalmente guarda un repuesto del texto del componente del texto del panel en una variable temporal
    	//Asigna el nuevo estylo de documento al componente del panel 
    	//Reastaura el texto del J text Pane nuevamentre paras que ahora aparesca con el estido de documentoi nuevo
    	
    	
        final StyleContext cont = StyleContext.getDefaultStyleContext();//Objeto cont sirve para proporcionar metodos para la gestion de estilos

        // Colores para diferentes tipos de palabras reservadas
        final AttributeSet attVariables = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 249)); // Azul  	     	//Define objetos atributos, uno para cada tipo de palabra que va a precentrse en el lenguaje y
        final AttributeSet attMetodos = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 249, 0)); // Verde			//mediante el objeto const es que inicializa bien dichos atributos con sus caracteristicas especiales
        final AttributeSet attEstructurasControl = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(249, 0, 0)); // Rojo
        final AttributeSet attOtros = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(144, 0, 144)); // Púrpura
        final AttributeSet attNumeros = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 192, 0));
        
        //CLASE ANONIMA
        //Define el metodo que aplica el documento de estilo a lo escrito en el componente del panel de texto
        //Dividiendo el texto por lineas, luego por palabras y luego aplicantoles un estilo dependiendo del estilo de la palabra
        DefaultStyledDocument doc = new DefaultStyledDocument() {
            
        	//SOBREESCRITURA DEL METODO INSETAR STRING
        		//metodo recibe como parametro un int offset que indica la pocision en el documento donde se va a insertar el texto
        		//String str el tecto a insertar a; documento
        	public void insertString(int offset, String str, AttributeSet a) throws BadLocationException {
        		super.insertString(offset, str, a); //Trae el metodo de la supercalse para ahcer la insercion del texto al documento
                String text = getText(0, getLength());//obtiene tolo el texto del documento desde la pocision 0 hasta el final del mismo
                int startLine = text.substring(0, offset).lastIndexOf('\n') + 1;//Busca el ultimo salto de linea antes de la pocision offset y le suma 1 para obtener el indice del primer caracter de la linea actual
                int endLine = text.indexOf('\n', offset);//encuentra el indice del primer salto de linea despues de offset
                if (endLine < 0) {
                    endLine = text.length(); //si no hay salto de linea entonces el final de la linea es el final del texto
                }
                String lineText = text.substring(startLine, endLine);//Extrae la linea de cadena de caracters del documento, empezando desde el inicio de linea hasta el final de linea
                String[] words = lineText.split("\\W");//Divide la linea en palabras y las almacena en un array, obteniendo palabras especiales segun una exprecion regula
                int lineOffset = 0;//Indice para el desplazamiento de la linea
                for (String word : words) {//para cada palabra en el arreglo
                    if (!word.isEmpty()) {
                        int start = startLine + lineOffset;
                        int end = start + word.length();//Define donde empiexa y donde termina
                        applyStyleToReservedWord(word, start, end, attVariables, attMetodos, attEstructurasControl, attOtros,attNumeros);//Metodo para aplicar un estilo especial a esa palabra, determimada por los rangos en donde se encuentra la palabra cambiando el estilo del doc en esos rangos
                    }
                    lineOffset += word.length() + 1; //incrementa el indice en la longitud de la palabra mas uno para la siguiente palabra
                }
            }

            private void applyStyleToReservedWord(String word, int start, int end, AttributeSet attVariables, AttributeSet attMetodos, AttributeSet attEstructurasControl, AttributeSet attOtros, AttributeSet attNumeros) {
            	//Para aplicar el estilo a una palabra dependiedo del ptipo de palabra que sea
                if (isVariable(word)) {
                    setCharacterAttributes(start, end - start, attVariables, false);//Cambia los atributos del documento y este refleja en la palabra el color nuevo, apliica el estilo en el rango esecificado del documento, para ello
                } else if (isMetodo(word)) {										//ocupa las variables ent y star parea determinar la longitud de la porcion a cambiar
                    setCharacterAttributes(start, end - start, attMetodos, false);
                } else if (isEstructuraControl(word)) {
                    setCharacterAttributes(start, end - start, attEstructurasControl, false);
                } else if(isNumero(word)){
                    setCharacterAttributes(start, end - start, attNumeros, false);
                }else {
                    setCharacterAttributes(start, end - start, attOtros, false);
                }
            }
            //Metodos para determinar que tipode palabra es la que se esta evaluando
            private boolean isVariable(String word) { //Verifica si es una variable si es que la palabra coincide con alguna de las palabras definidas en em match
                return word.matches("\\b(ENT|DEC|CADENA|BOOL)\\b");
            }

            private boolean isMetodo(String word) {//Lo msmo para los demas metodos
                return word.matches("\\b(DEVUELVE|ENTRADA|IMPRIME)\\b");
            }

            private boolean isEstructuraControl(String word) {
                return word.matches("\\b(SI|HAZ|SINO|BUCLE)\\b");
            }
            private boolean isNumero(String word) {
                return word.matches("\\d+");
            }
            
        };

        // Aplicar el estilo al JTextPane
        String temp = jtpCode.getText();//Guarda temporalmete el codigo
        jtpCode.setStyledDocument(doc);//Le aplica el estilo de documento al panel de texto
        jtpCode.setText(temp); //Regrea el guardado del c[odigo temporal al panel de texto
    }

    

    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
    	//Los componentes se declararon coomo atrributos del IDE y aqui se inicializan completamente 
    	//Botones, cuadros te texto y Scrolls
        btnCompilar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnReserved = new javax.swing.JButton();
        btnIdentifiers = new javax.swing.JButton();
        btnTokens = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpCode = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaCompile = new javax.swing.JTextArea();
        
        //Se alteran los primeros cambios de
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Zabre IDE");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1360, 690));
        setPreferredSize(new java.awt.Dimension(1360, 720));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        
        //Se ubica y configura el boton Compilar
        btnCompilar.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnCompilar.setText("COMPILAR");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {//Aqui se marca el metodo/accion que va a ejecutar dicho boton compilar
                btnCompilarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCompilar, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, 140, 70)); //Se anade al panel para mostrar

        //Lo mismo ahora con el boton de compilar
        btnNuevo.setText("NUEVO");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {//Se marca la accion que el boton "Nuevo" va a realizar
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 140, 70));//Se anade al panel para mostrar botones

        btnAbrir.setText("ABRIR");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        getContentPane().add(btnAbrir, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 140, 70));

        btnGuardar.setFont(new java.awt.Font("Helvetica Neue", 0, 8)); // NOI18N
        btnGuardar.setText("GUARDAR");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 140, 70));

        btnReserved.setFont(new java.awt.Font("Helvetica Neue", 0, 8)); // NOI18N
        btnReserved.setText("RESERVADAS");
        getContentPane().add(btnReserved, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, 140, 70));

        btnIdentifiers.setText("IDENT");
        btnIdentifiers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentifiersActionPerformed(evt);
            }
        });
        getContentPane().add(btnIdentifiers, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, 140, 70));

        btnTokens.setText("TOKENS");
        btnTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTokensActionPerformed(evt);
            }
        });
        getContentPane().add(btnTokens, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 140, 70));

        jScrollPane1.setViewportView(jtpCode);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 1330, 360));

        jtaCompile.setColumns(20);
        jtaCompile.setRows(5);
        jScrollPane2.setViewportView(jtaCompile);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 1340, 210));

        pack();
    }// </editor-fold>                        
    
    
    //Acciones-Metodos que realizan los diferentes botones
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//Para crear un nuevo documento de texto
        jtaCompile.setText("");//Quita el texto del componente Area de texto (la supuesta consola)
        dir.Nuevo(this);//Objeto  que se va a encargar de manejar la creacion y ubicacion del nuevo documento 
    }

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//Accion para guardar cambios al documento
        dir.Guardar(this); //Objeto encargado de manejar direcciones guardar el documento actual en alguna direccion de memoria
    }

    private void btnIdentifiersActionPerformed(java.awt.event.ActionEvent evt) {// no hace nada xD
        // TODO add your handling code here:
    	//
    }

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {
        dir.Abrir(this);//objeto se encarga de manejar la gestion de documentos para acceder a un nuevo doc
    }

   private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//Metodo encargado de hacer la compilaci[on de lo que se encuentre escrito en el panel de tecto jtpCode
	    jtaCompile.setText(""); // Limpiar el área de texto donde se muestran los mensajes de compilación
	    String input = jtpCode.getText();//Toma el texto del componente de del panel de texto jtpCode
	    ArrayList<Token> tokens = alex.getTokens(input); //Crea los Tokens a partir del texto tomado
	    //Evalua si hubo tokens o nel
	    if (tokens.isEmpty()) {
	        jtaCompile.append("No hay tokens válidos para compilar.\n"); //Muestra el mensaje en el componente de los mensajes de que no hay tokens por analizar
	        return;//Termina el metodo para ya no hacer nada mas
	    }else{
	        
	        // yo habia ponido un parser aqui 
	        jtaCompile.append("Los tokens encontrados son :" + tokens.size() + "\n");
	        for (int i = 0; i <= tokens.size() - 1; i++) {
	        	jtaCompile.append((i + 1)+ ".- " + tokens.get(i).type + " de valor ''" +  tokens.get(i).value + "''\n");
	        }
	        
	    }
	    //Crea y ejecuta el interprete con la lista de tokens obtenida del texto obtenido
	    //Interprete interprete = new Interprete();
	    //interprete.execute(tokens);
	
	    // Para capturar la salida del sistema del interprete
	    //ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
	    //PrintStream printStream = new PrintStream(outputStream);
	    //System.setOut(printStream);
	   
	    
	    try {
	       // interprete.execute(tokens);//Re-ejetua el interprete  dada la lista de tokens creada
	       // jtaCompile.append(outputStream.toString()); //captura la salida del interpete (denuevo) y la manda a mostrar en el panel de area de texto (supuesta consola) 
	    } catch (Exception e) {
	        jtaCompile.append("Error durante la compilación: " + e.getMessage() + "\n");
	    } finally {
	        System.setOut(System.out); // Restaurar la salida estándar
	    }
	    
	   /*for (Alexico.Token token : tokens) {
            System.out.println(token);
         }*/

	    String verificacion = parser.parse(tokens);
	    //System.out.printf(verificacion);
	    jtaCompile.append(verificacion);
	    // ArrayList<Token> tokens2 = new ArrayList<>();
	    /*ArrayList<Token> tokens2 = new ArrayList<>();
	    tokens2 = tokens;
	    Parser parser = new Parser();
        String tree = parser.parse(input, tokens2);
        jtaCompile.append(tree);*/
   }

    private void btnTokensActionPerformed(java.awt.event.ActionEvent evt) {// Llama al metodo lexer para obtener los tokens del texto que hay en epanel de texto jtoCode
       lexer();
    }

    private void lexer() {
        String input = jtpCode.getText();
        ArrayList<Token> tokens = alex.getTokens(input);
        
        StringBuilder sb = new StringBuilder();
        for (Token token : tokens) {
            sb.append(token.toString()).append("\n");
        }
        
        jtaCompile.setText(sb.toString());
    }

    
    //ATRIBUTOS DE LA CALSE IDE
    	//Funjen como los componentes del IDE, por alguna razon se pueden declarar despues de los metodos que los usanxD
    	//Solo estan declarados, pero no inicializados
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnIdentifiers;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnReserved;
    private javax.swing.JButton btnTokens;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jtaCompile;
    public javax.swing.JTextPane jtpCode;
    // End of variables declaration                   
}
